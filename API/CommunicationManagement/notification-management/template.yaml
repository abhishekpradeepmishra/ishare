AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  notification-management

  Sample SAM Template for notification-management
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
## Fabtan testing sync codes
Globals:
  Function:
    Timeout: 3

Parameters:
  TableName:
    Type: String
    Default: 'api_websocket_connections'
    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'

Resources:

  ishareAPIAccount:
    Type: AWS::ApiGateway::Account
    Properties: 
      CloudWatchRoleArn: !GetAtt iShareApiCWLogsRole.Arn  

  iShareApiCWLogsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
      - PolicyName: AllowFullCWLogs
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: "logs:*"
              Resource: "*"

  NotificationFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: notification/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME:
            Ref: TableName
          APIGW_ENDPOINT:
            Fn::Sub: "${NotificationWebSocket}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
      
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: TableName
      - Statement:
        - Effect: Allow
          Action:
          - execute-api:ManageConnections
          Resource:
          - Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${NotificationWebSocket}/*
        - Effect: Allow
          Action:
          - s3:*
          Resource:
          - "*"


## Websocket API Gateway
  NotificationWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: NotificationWebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  NotificationWebSocketAuthFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: notificationwebsocketauth/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x


  WSConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: NotificationWebSocket
      RouteKey: $connect
      #AuthorizationType: CUSTOM
      #AuthorizerId: 
      #  Ref: WSConnectAuth
      OperationName: WSConnectRoute
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: WSConnectInteg

  WSConnectAuth:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties: 
        ApiId:
          Ref: NotificationWebSocket
        AuthorizerType: REQUEST
        AuthorizerUri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotificationWebSocketAuthFunction.Arn}/invocations
        IdentitySource: 
           - route.request.header.HeaderAuth1
        Name: NotificationAuth

  WSConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: NotificationWebSocket
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations

  WSDisConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: NotificationWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: WSDisConnectRoute
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: WSDisconnectInteg

  WSDisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: NotificationWebSocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations

  WSNotifyRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: NotificationWebSocket
      RouteKey: notify
      AuthorizationType: NONE
      OperationName: WSNotifyRoute
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: WSSendInteg

  WSSendInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: NotificationWebSocket
      Description: Send Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations


  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - WSConnectRoute
    - WSNotifyRoute
    - WSDisConnectRoute
    Properties:
      ApiId:
        Ref: NotificationWebSocket

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId:
        Ref: Deployment
      ApiId:
        Ref: NotificationWebSocket

  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: connectionId
        AttributeType: S
      KeySchema:
      - AttributeName: connectionId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: true
      TableName:
        Ref: TableName

  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ws_onconnect/
      Handler: app.lambdaHandler
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME:
            Ref: TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: TableName

  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - NotificationWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: OnConnectFunction
      Principal: apigateway.amazonaws.com

  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ws_disconnect/
      Handler: app.lambdaHandler
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME:
            Ref: TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: TableName

  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - NotificationWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: OnDisconnectFunction
      Principal: apigateway.amazonaws.com

  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ws_sendmessage/
      Handler: app.lambdaHandler
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME:
            Ref: TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: TableName
      - Statement:
        - Effect: Allow
          Action:
          - execute-api:ManageConnections
          Resource:
          - Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${NotificationWebSocket}/*

  SendMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - NotificationWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: SendMessageFunction
      Principal: apigateway.amazonaws.com


Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  WebSocketURI:
    Description: "The WSS Protocol URI to connect to"
    Value: !Join [ '', [ 'wss://', !Ref NotificationWebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref 'Stage'] ]
